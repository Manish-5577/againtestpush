public class praccurrency {

	public class Rates {
	@auraenabled	public Double AED {get;set;}
@auraenabled	public Double AFN {get;set;}
@auraenabled	public Double ALL {get;set;}
@auraenabled	public Double AMD {get;set;}
@auraenabled	public Double ANG {get;set;}
@auraenabled	public Double AOA {get;set;}
@auraenabled	public Double ARS {get;set;}
@auraenabled	public Double AUD {get;set;}
@auraenabled	public Double AWG {get;set;}
@auraenabled	public Double AZN {get;set;}
@auraenabled	public Double BAM {get;set;}
@auraenabled	public Double BBD {get;set;}
@auraenabled	public Double BDT {get;set;}
@auraenabled	public Double BGN {get;set;}
@auraenabled	public Double BHD {get;set;}
@auraenabled	public Double BIF {get;set;}
@auraenabled	public Double BMD {get;set;}
@auraenabled	public Double BND {get;set;}
@auraenabled	public Double BOB {get;set;}
@auraenabled	public Double BRL {get;set;}
@auraenabled	public Double BSD {get;set;}
@auraenabled	public Double BTC {get;set;}
@auraenabled	public Double BTN {get;set;}
@auraenabled	public Double BWP {get;set;}
@auraenabled	public Double BYN {get;set;}
@auraenabled	public Double BYR {get;set;}
@auraenabled	public Double BZD {get;set;}
@auraenabled	public Double CAD {get;set;}
@auraenabled	public Double CDF {get;set;}
@auraenabled	public Double CHF {get;set;}
@auraenabled	public Double CLF {get;set;}
@auraenabled	public Double CLP {get;set;}
@auraenabled	public Double CNY {get;set;}
@auraenabled	public Double COP {get;set;}
@auraenabled	public Double CRC {get;set;}
@auraenabled	public Double CUC {get;set;}
@auraenabled	public Double CUP {get;set;}
@auraenabled	public Double CVE {get;set;}
@auraenabled	public Double CZK {get;set;}
@auraenabled	public Double DJF {get;set;}
@auraenabled	public Double DKK {get;set;}
@auraenabled	public Double DOP {get;set;}
@auraenabled	public Double DZD {get;set;}
@auraenabled	public Double EGP {get;set;}
@auraenabled	public Double ERN {get;set;}
@auraenabled	public Double ETB {get;set;}
@auraenabled	public Integer EUR {get;set;}
@auraenabled	public Double FJD {get;set;}
@auraenabled	public Double FKP {get;set;}
@auraenabled	public Double GBP {get;set;}
@auraenabled	public Double GEL {get;set;}
@auraenabled	public Double GGP {get;set;}
@auraenabled	public Double GHS {get;set;}
@auraenabled	public Double GIP {get;set;}
@auraenabled	public Double GMD {get;set;}
@auraenabled	public Double GNF {get;set;}
@auraenabled	public Double GTQ {get;set;}
@auraenabled	public Double GYD {get;set;}
@auraenabled	public Double HKD {get;set;}
@auraenabled	public Double HNL {get;set;}
@auraenabled	public Double HRK {get;set;}
@auraenabled	public Double HTG {get;set;}
@auraenabled	public Double HUF {get;set;}
@auraenabled	public Double IDR {get;set;}
@auraenabled	public Double ILS {get;set;}
@auraenabled	public Double IMP {get;set;}
@auraenabled	public Double INR {get;set;}
@auraenabled	public Double IQD {get;set;}
@auraenabled	public Double IRR {get;set;}
@auraenabled	public Double ISK {get;set;}
@auraenabled	public Double JEP {get;set;}
@auraenabled	public Double JMD {get;set;}
@auraenabled	public Double JOD {get;set;}
@auraenabled	public Double JPY {get;set;}
@auraenabled	public Double KES {get;set;}
@auraenabled	public Double KGS {get;set;}
@auraenabled	public Double KHR {get;set;}
@auraenabled	public Double KMF {get;set;}
@auraenabled	public Double KPW {get;set;}
@auraenabled	public Double KRW {get;set;}
@auraenabled	public Double KWD {get;set;}
@auraenabled	public Double KYD {get;set;}
@auraenabled	public Double KZT {get;set;}
@auraenabled	public Double LAK {get;set;}
@auraenabled	public Double LBP {get;set;}
@auraenabled	public Double LKR {get;set;}
@auraenabled	public Double LRD {get;set;}
@auraenabled	public Double LSL {get;set;}
@auraenabled	public Double LTL {get;set;}
@auraenabled	public Double LVL {get;set;}
@auraenabled	public Double LYD {get;set;}
@auraenabled	public Double MAD {get;set;}
@auraenabled	public Double MDL {get;set;}
@auraenabled	public Double MGA {get;set;}
@auraenabled	public Double MKD {get;set;}
@auraenabled	public Double MMK {get;set;}
@auraenabled	public Double MNT {get;set;}
@auraenabled	public Double MOP {get;set;}
@auraenabled	public Double MRO {get;set;}
@auraenabled	public Double MUR {get;set;}
@auraenabled	public Double MVR {get;set;}
@auraenabled	public Double MWK {get;set;}
@auraenabled	public Double MXN {get;set;}
@auraenabled	public Double MYR {get;set;}
@auraenabled	public Double MZN {get;set;}
@auraenabled	public Double NAD {get;set;}
@auraenabled	public Double NGN {get;set;}
@auraenabled	public Double NIO {get;set;}
@auraenabled	public Double NOK {get;set;}
@auraenabled	public Double NPR {get;set;}
@auraenabled	public Double NZD {get;set;}
@auraenabled	public Double OMR {get;set;}
@auraenabled	public Double PAB {get;set;}
@auraenabled	public Double PEN {get;set;}
@auraenabled	public Double PGK {get;set;}
@auraenabled	public Double PHP {get;set;}
@auraenabled	public Double PKR {get;set;}
@auraenabled	public Double PLN {get;set;}
@auraenabled	public Double PYG {get;set;}
@auraenabled	public Double QAR {get;set;}
@auraenabled	public Double RON {get;set;}
@auraenabled	public Double RSD {get;set;}
@auraenabled	public Double RUB {get;set;}
@auraenabled	public Double RWF {get;set;}
@auraenabled	public Double SAR {get;set;}
@auraenabled	public Double SBD {get;set;}
@auraenabled	public Double SCR {get;set;}
@auraenabled	public Double SDG {get;set;}
@auraenabled	public Double SEK {get;set;}
@auraenabled	public Double SGD {get;set;}
@auraenabled	public Double SHP {get;set;}
@auraenabled	public Double SLE {get;set;}
@auraenabled	public Double SLL {get;set;}
@auraenabled	public Double SOS {get;set;}
@auraenabled	public Double SSP {get;set;}
@auraenabled	public Double SRD {get;set;}
@auraenabled	public Double STD {get;set;}
@auraenabled	public Double SYP {get;set;}
@auraenabled	public Double SZL {get;set;}
@auraenabled	public Double THB {get;set;}
@auraenabled	public Double TJS {get;set;}
@auraenabled	public Double TMT {get;set;}
@auraenabled	public Double TND {get;set;}
@auraenabled	public Double TOP {get;set;}
@auraenabled	public Double TRY_Z {get;set;} // in json: TRY
@auraenabled	public Double TTD {get;set;}
@auraenabled	public Double TWD {get;set;}
@auraenabled	public Double TZS {get;set;}
@auraenabled	public Double UAH {get;set;}
@auraenabled	public Double UGX {get;set;}
@auraenabled	public Double USD {get;set;}
@auraenabled	public Double UYU {get;set;}
@auraenabled	public Double UZS {get;set;}
@auraenabled	public Double VEF {get;set;}
@auraenabled	public Double VES {get;set;}
@auraenabled	public Double VND {get;set;}
@auraenabled	public Double VUV {get;set;}
@auraenabled	public Double WST {get;set;}
@auraenabled	public Double XAF {get;set;}
@auraenabled	public Double XAG {get;set;}
@auraenabled	public Double XAU {get;set;}
@auraenabled	public Double XCD {get;set;}
@auraenabled	public Double XDR {get;set;}
@auraenabled	public Double XOF {get;set;}
@auraenabled	public Double XPF {get;set;}
@auraenabled	public Double YER {get;set;}
@auraenabled	public Double ZAR {get;set;}
@auraenabled	public Double ZMK {get;set;}
@auraenabled	public Double ZMW {get;set;}
@auraenabled	public Double ZWL {get;set;}
		public Rates(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'AED') {
							AED = parser.getDoubleValue();
						} else if (text == 'AFN') {
							AFN = parser.getDoubleValue();
						} else if (text == 'ALL') {
							ALL = parser.getDoubleValue();
						} else if (text == 'AMD') {
							AMD = parser.getDoubleValue();
						} else if (text == 'ANG') {
							ANG = parser.getDoubleValue();
						} else if (text == 'AOA') {
							AOA = parser.getDoubleValue();
						} else if (text == 'ARS') {
							ARS = parser.getDoubleValue();
						} else if (text == 'AUD') {
							AUD = parser.getDoubleValue();
						} else if (text == 'AWG') {
							AWG = parser.getDoubleValue();
						} else if (text == 'AZN') {
							AZN = parser.getDoubleValue();
						} else if (text == 'BAM') {
							BAM = parser.getDoubleValue();
						} else if (text == 'BBD') {
							BBD = parser.getDoubleValue();
						} else if (text == 'BDT') {
							BDT = parser.getDoubleValue();
						} else if (text == 'BGN') {
							BGN = parser.getDoubleValue();
						} else if (text == 'BHD') {
							BHD = parser.getDoubleValue();
						} else if (text == 'BIF') {
							BIF = parser.getDoubleValue();
						} else if (text == 'BMD') {
							BMD = parser.getDoubleValue();
						} else if (text == 'BND') {
							BND = parser.getDoubleValue();
						} else if (text == 'BOB') {
							BOB = parser.getDoubleValue();
						} else if (text == 'BRL') {
							BRL = parser.getDoubleValue();
						} else if (text == 'BSD') {
							BSD = parser.getDoubleValue();
						} else if (text == 'BTC') {
							BTC = parser.getDoubleValue();
						} else if (text == 'BTN') {
							BTN = parser.getDoubleValue();
						} else if (text == 'BWP') {
							BWP = parser.getDoubleValue();
						} else if (text == 'BYN') {
							BYN = parser.getDoubleValue();
						} else if (text == 'BYR') {
							BYR = parser.getDoubleValue();
						} else if (text == 'BZD') {
							BZD = parser.getDoubleValue();
						} else if (text == 'CAD') {
							CAD = parser.getDoubleValue();
						} else if (text == 'CDF') {
							CDF = parser.getDoubleValue();
						} else if (text == 'CHF') {
							CHF = parser.getDoubleValue();
						} else if (text == 'CLF') {
							CLF = parser.getDoubleValue();
						} else if (text == 'CLP') {
							CLP = parser.getDoubleValue();
						} else if (text == 'CNY') {
							CNY = parser.getDoubleValue();
						} else if (text == 'COP') {
							COP = parser.getDoubleValue();
						} else if (text == 'CRC') {
							CRC = parser.getDoubleValue();
						} else if (text == 'CUC') {
							CUC = parser.getDoubleValue();
						} else if (text == 'CUP') {
							CUP = parser.getDoubleValue();
						} else if (text == 'CVE') {
							CVE = parser.getDoubleValue();
						} else if (text == 'CZK') {
							CZK = parser.getDoubleValue();
						} else if (text == 'DJF') {
							DJF = parser.getDoubleValue();
						} else if (text == 'DKK') {
							DKK = parser.getDoubleValue();
						} else if (text == 'DOP') {
							DOP = parser.getDoubleValue();
						} else if (text == 'DZD') {
							DZD = parser.getDoubleValue();
						} else if (text == 'EGP') {
							EGP = parser.getDoubleValue();
						} else if (text == 'ERN') {
							ERN = parser.getDoubleValue();
						} else if (text == 'ETB') {
							ETB = parser.getDoubleValue();
						} else if (text == 'EUR') {
							EUR = parser.getIntegerValue();
						} else if (text == 'FJD') {
							FJD = parser.getDoubleValue();
						} else if (text == 'FKP') {
							FKP = parser.getDoubleValue();
						} else if (text == 'GBP') {
							GBP = parser.getDoubleValue();
						} else if (text == 'GEL') {
							GEL = parser.getDoubleValue();
						} else if (text == 'GGP') {
							GGP = parser.getDoubleValue();
						} else if (text == 'GHS') {
							GHS = parser.getDoubleValue();
						} else if (text == 'GIP') {
							GIP = parser.getDoubleValue();
						} else if (text == 'GMD') {
							GMD = parser.getDoubleValue();
						} else if (text == 'GNF') {
							GNF = parser.getDoubleValue();
						} else if (text == 'GTQ') {
							GTQ = parser.getDoubleValue();
						} else if (text == 'GYD') {
							GYD = parser.getDoubleValue();
						} else if (text == 'HKD') {
							HKD = parser.getDoubleValue();
						} else if (text == 'HNL') {
							HNL = parser.getDoubleValue();
						} else if (text == 'HRK') {
							HRK = parser.getDoubleValue();
						} else if (text == 'HTG') {
							HTG = parser.getDoubleValue();
						} else if (text == 'HUF') {
							HUF = parser.getDoubleValue();
						} else if (text == 'IDR') {
							IDR = parser.getDoubleValue();
						} else if (text == 'ILS') {
							ILS = parser.getDoubleValue();
						} else if (text == 'IMP') {
							IMP = parser.getDoubleValue();
						} else if (text == 'INR') {
							INR = parser.getDoubleValue();
						} else if (text == 'IQD') {
							IQD = parser.getDoubleValue();
						} else if (text == 'IRR') {
							IRR = parser.getDoubleValue();
						} else if (text == 'ISK') {
							ISK = parser.getDoubleValue();
						} else if (text == 'JEP') {
							JEP = parser.getDoubleValue();
						} else if (text == 'JMD') {
							JMD = parser.getDoubleValue();
						} else if (text == 'JOD') {
							JOD = parser.getDoubleValue();
						} else if (text == 'JPY') {
							JPY = parser.getDoubleValue();
						} else if (text == 'KES') {
							KES = parser.getDoubleValue();
						} else if (text == 'KGS') {
							KGS = parser.getDoubleValue();
						} else if (text == 'KHR') {
							KHR = parser.getDoubleValue();
						} else if (text == 'KMF') {
							KMF = parser.getDoubleValue();
						} else if (text == 'KPW') {
							KPW = parser.getDoubleValue();
						} else if (text == 'KRW') {
							KRW = parser.getDoubleValue();
						} else if (text == 'KWD') {
							KWD = parser.getDoubleValue();
						} else if (text == 'KYD') {
							KYD = parser.getDoubleValue();
						} else if (text == 'KZT') {
							KZT = parser.getDoubleValue();
						} else if (text == 'LAK') {
							LAK = parser.getDoubleValue();
						} else if (text == 'LBP') {
							LBP = parser.getDoubleValue();
						} else if (text == 'LKR') {
							LKR = parser.getDoubleValue();
						} else if (text == 'LRD') {
							LRD = parser.getDoubleValue();
						} else if (text == 'LSL') {
							LSL = parser.getDoubleValue();
						} else if (text == 'LTL') {
							LTL = parser.getDoubleValue();
						} else if (text == 'LVL') {
							LVL = parser.getDoubleValue();
						} else if (text == 'LYD') {
							LYD = parser.getDoubleValue();
						} else if (text == 'MAD') {
							MAD = parser.getDoubleValue();
						} else if (text == 'MDL') {
							MDL = parser.getDoubleValue();
						} else if (text == 'MGA') {
							MGA = parser.getDoubleValue();
						} else if (text == 'MKD') {
							MKD = parser.getDoubleValue();
						} else if (text == 'MMK') {
							MMK = parser.getDoubleValue();
						} else if (text == 'MNT') {
							MNT = parser.getDoubleValue();
						} else if (text == 'MOP') {
							MOP = parser.getDoubleValue();
						} else if (text == 'MRO') {
							MRO = parser.getDoubleValue();
						} else if (text == 'MUR') {
							MUR = parser.getDoubleValue();
						} else if (text == 'MVR') {
							MVR = parser.getDoubleValue();
						} else if (text == 'MWK') {
							MWK = parser.getDoubleValue();
						} else if (text == 'MXN') {
							MXN = parser.getDoubleValue();
						} else if (text == 'MYR') {
							MYR = parser.getDoubleValue();
						} else if (text == 'MZN') {
							MZN = parser.getDoubleValue();
						} else if (text == 'NAD') {
							NAD = parser.getDoubleValue();
						} else if (text == 'NGN') {
							NGN = parser.getDoubleValue();
						} else if (text == 'NIO') {
							NIO = parser.getDoubleValue();
						} else if (text == 'NOK') {
							NOK = parser.getDoubleValue();
						} else if (text == 'NPR') {
							NPR = parser.getDoubleValue();
						} else if (text == 'NZD') {
							NZD = parser.getDoubleValue();
						} else if (text == 'OMR') {
							OMR = parser.getDoubleValue();
						} else if (text == 'PAB') {
							PAB = parser.getDoubleValue();
						} else if (text == 'PEN') {
							PEN = parser.getDoubleValue();
						} else if (text == 'PGK') {
							PGK = parser.getDoubleValue();
						} else if (text == 'PHP') {
							PHP = parser.getDoubleValue();
						} else if (text == 'PKR') {
							PKR = parser.getDoubleValue();
						} else if (text == 'PLN') {
							PLN = parser.getDoubleValue();
						} else if (text == 'PYG') {
							PYG = parser.getDoubleValue();
						} else if (text == 'QAR') {
							QAR = parser.getDoubleValue();
						} else if (text == 'RON') {
							RON = parser.getDoubleValue();
						} else if (text == 'RSD') {
							RSD = parser.getDoubleValue();
						} else if (text == 'RUB') {
							RUB = parser.getDoubleValue();
						} else if (text == 'RWF') {
							RWF = parser.getDoubleValue();
						} else if (text == 'SAR') {
							SAR = parser.getDoubleValue();
						} else if (text == 'SBD') {
							SBD = parser.getDoubleValue();
						} else if (text == 'SCR') {
							SCR = parser.getDoubleValue();
						} else if (text == 'SDG') {
							SDG = parser.getDoubleValue();
						} else if (text == 'SEK') {
							SEK = parser.getDoubleValue();
						} else if (text == 'SGD') {
							SGD = parser.getDoubleValue();
						} else if (text == 'SHP') {
							SHP = parser.getDoubleValue();
						} else if (text == 'SLE') {
							SLE = parser.getDoubleValue();
						} else if (text == 'SLL') {
							SLL = parser.getDoubleValue();
						} else if (text == 'SOS') {
							SOS = parser.getDoubleValue();
						} else if (text == 'SSP') {
							SSP = parser.getDoubleValue();
						} else if (text == 'SRD') {
							SRD = parser.getDoubleValue();
						} else if (text == 'STD') {
							STD = parser.getDoubleValue();
						} else if (text == 'SYP') {
							SYP = parser.getDoubleValue();
						} else if (text == 'SZL') {
							SZL = parser.getDoubleValue();
						} else if (text == 'THB') {
							THB = parser.getDoubleValue();
						} else if (text == 'TJS') {
							TJS = parser.getDoubleValue();
						} else if (text == 'TMT') {
							TMT = parser.getDoubleValue();
						} else if (text == 'TND') {
							TND = parser.getDoubleValue();
						} else if (text == 'TOP') {
							TOP = parser.getDoubleValue();
						} else if (text == 'TRY') {
							TRY_Z = parser.getDoubleValue();
						} else if (text == 'TTD') {
							TTD = parser.getDoubleValue();
						} else if (text == 'TWD') {
							TWD = parser.getDoubleValue();
						} else if (text == 'TZS') {
							TZS = parser.getDoubleValue();
						} else if (text == 'UAH') {
							UAH = parser.getDoubleValue();
						} else if (text == 'UGX') {
							UGX = parser.getDoubleValue();
						} else if (text == 'USD') {
							USD = parser.getDoubleValue();
						} else if (text == 'UYU') {
							UYU = parser.getDoubleValue();
						} else if (text == 'UZS') {
							UZS = parser.getDoubleValue();
						} else if (text == 'VEF') {
							VEF = parser.getDoubleValue();
						} else if (text == 'VES') {
							VES = parser.getDoubleValue();
						} else if (text == 'VND') {
							VND = parser.getDoubleValue();
						} else if (text == 'VUV') {
							VUV = parser.getDoubleValue();
						} else if (text == 'WST') {
							WST = parser.getDoubleValue();
						} else if (text == 'XAF') {
							XAF = parser.getDoubleValue();
						} else if (text == 'XAG') {
							XAG = parser.getDoubleValue();
						} else if (text == 'XAU') {
							XAU = parser.getDoubleValue();
						} else if (text == 'XCD') {
							XCD = parser.getDoubleValue();
						} else if (text == 'XDR') {
							XDR = parser.getDoubleValue();
						} else if (text == 'XOF') {
							XOF = parser.getDoubleValue();
						} else if (text == 'XPF') {
							XPF = parser.getDoubleValue();
						} else if (text == 'YER') {
							YER = parser.getDoubleValue();
						} else if (text == 'ZAR') {
							ZAR = parser.getDoubleValue();
						} else if (text == 'ZMK') {
							ZMK = parser.getDoubleValue();
						} else if (text == 'ZMW') {
							ZMW = parser.getDoubleValue();
						} else if (text == 'ZWL') {
							ZWL = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Rates consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					
                    }
				}
			}
		}
	}
	
	  
 /*@auraenabled   public Boolean success {get;set;} 
@auraenabled	public Integer timestamp {get;set;} 
@auraenabled	public String base {get;set;} 
@auraenabled	public String date_Z {get;set;} // in json: date*/
	@auraenabled public Rates rates {get;set;} 

	public praccurrency(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    
					/*if (text == 'success') {
						success = parser.getBooleanValue();
					} else if (text == 'timestamp') {
						timestamp = parser.getIntegerValue();
					} else if (text == 'base') {
						base = parser.getText();
					} else if (text == 'date') {
						date_Z = parser.getText();
					}*/  if (text == 'rates') {
						rates = new Rates(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
@auraenabled
    public static praccurrency parse() {
         string endPoint='http://api.exchangeratesapi.io/v1/latest?access_key=';
string accesskey='fab7fe934513dd1aecf9f17a9faf5c50';

    endpoint= endpoint +accesskey;
      //  endPoint = endPoint + pincode;
        Http h1=new Http();
        HttpRequest req1=new HttpRequest();
        HttpResponse hresp1=new HttpResponse();
        //req1.setHeader('Authorization','Bearer '+accToken);
        req1.setHeader('Content-Type','application/json');
        //req1.setHeader('Accept','application/json');
        req1.setMethod('GET');
        req1.setEndpoint(endPoint);
         
    hresp1=h1.send(req1);

system.debug(hresp1.getbody());
		System.JSONParser parser = System.JSON.createParser(hresp1.getbody());
		return new praccurrency(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	






}