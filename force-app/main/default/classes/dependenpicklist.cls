public class dependenpicklist {

   
    
    public static Map<String, Set<String>> getFieldDependencies(String objectName, String controllingField, String dependentField){
        Map<String, Set<String>> controllingInfo = new Map<String, Set<String>>();


        Schema.SObjectType objType = Schema.getGlobalDescribe().get(objectName);
        Schema.DescribeSObjectResult describeResult = objType.getDescribe();
        Schema.DescribeFieldResult controllingFieldInfo = describeResult.fields.getMap().get(controllingField).getDescribe();
        Schema.DescribeFieldResult dependentFieldInfo = describeResult.fields.getMap().get(dependentField).getDescribe();
        List<Schema.PicklistEntry> controllingValues = controllingFieldInfo.getPicklistValues();
        List<Schema.PicklistEntry> dependentValues = dependentFieldInfo.getPicklistValues();
        for(Schema.PicklistEntry currControllingValue : controllingValues){
            controllingInfo.put(currControllingValue.getValue(), new Set<String>());
        }
        for(Schema.PicklistEntry currDependentValue : dependentValues){
            String jsonString = JSON.serialize(currDependentValue);
            MyPickListInfo info = (MyPickListInfo) JSON.deserialize(jsonString, MyPickListInfo.class);
            system.debug('info valid for===>'+info.validFor);
            
            String hexString = EncodingUtil.convertToHex(EncodingUtil.base64Decode(info.validFor)).toUpperCase();
            system.debug('base64Decode(info.validFor)==>'+string.valueof(EncodingUtil.base64Decode(info.validFor)));
             system.debug('EncodingUtil.convertToHex==>'+EncodingUtil.convertToHex(EncodingUtil.base64Decode(info.validFor)));
            system.debug('hex string ==>'+hexString);
            
          Blob blobContent = EncodingUtil.base64Decode( info.validFor );
System.debug('Decoded Base64 value is $$$$$$$$$$$'+blobContent.size());
//System.debug('Decoded Base64 value is $$$$$$$$$$$'+blobContent.toString());
            
            
            Integer baseCount = 0;
//toLowerCase can be changed to uppercase and getLabel() can be changed to getValue() based on requirement.
            for(Integer curr : hexString.getChars()){
                system.debug(' hexString.getlengtgh()==>'+ hexString.getChars());
                system.debug('curr is ==>'+curr);
                Integer val = (curr >= 65)?(curr - 65 + 10):(curr - 48);
                    if((val & 8) == 8){
                        controllingInfo.get(controllingValues[baseCount + 0].getValue()).add(currDependentValue.getLabel().toLowerCase());
         system.debug('11'+currDependentValue.getLabel().toLowerCase());                            
                                      }


                if((val & 4) == 4){controllingInfo.get(controllingValues[baseCount + 1].getValue()).add(currDependentValue.getLabel().toLowerCase());
                       system.debug('222'+currDependentValue.getLabel().toLowerCase());                            
                    
                                  }
                if((val & 2) == 2){controllingInfo.get(controllingValues[baseCount + 2].getValue()).add(currDependentValue.getLabel().toLowerCase());
                          system.debug('3333'+currDependentValue.getLabel().toLowerCase());                            
                 
                                  }
                if((val & 1) == 1){controllingInfo.get(controllingValues[baseCount + 3].getValue()).add(currDependentValue.getLabel().toLowerCase());
                                           system.debug('4444'+currDependentValue.getLabel().toLowerCase());                            

                                  }
                baseCount += 4;
            }            
        } 
        return controllingInfo;
    }
    
    public class MyPickListInfo {
        public String validFor;
    }
}